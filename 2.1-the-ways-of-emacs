-Emacs was first a set of macros written by Richard Stallman for a text editor called (TECO) back in 1967

- Ever since then there has been many competing Emacs implementations for Emacs, but today you will likely encounter XEmacs or GNU Emacs

-XEmacs was more advanced than GNU Emacs util GNU Emacs 22, and ever since version 22 GNU had the upper hand

-Eamcs has very odd terminology for the things we have today

#GUIDING PHILOSOPHY
--------------------
-Emacs is a tinkere's editor. Plain and simple. People who hack on Emacs do it because almost every facet of it is extensible.

-"It is the original extensible, customizable, self-documenting editor"

-Being able to customize so much of Emacs might seems as an unnecessary distraction from your work - and indeed this comes at the expense of own workflow - but when you realize you can make Emacs do whatever you want, this open a world of possiblies

-You can truly rebind all of Emacs's keys to your liking

-Truly, in Emacs you can change everything

-Emacs pulls you in, once you get used to it you'll start using it for IRC, email, database access, organizing your thoughts, command-line shells, ...

-Emacs HISTORY:
       Emacs's source code repository (now in Git) stretches back over 30 years
       and has more than 130,000 commits and nearly 600 committers

#LISP?
------
-Emacs is customized through this (scripting) language knows as Emacs Lisp (informally known as elisp) because Lisp is a perfect abstraction suitable for Emacs.
TCL have been considered to replace lisp but this attempt was failed

-You will have to learn living with Emacs configuration and elisp, but if you hate the idea of tweaking everything, you have 2 options left:
     #Use a starter kit: pre-built emacs configurations with additional packages, like:
     -Steve Purcell's .emacs.d
     -Bozhidar Batzov's Prelude

     #Use the defaults

-Emacs is powered by its own implementation of Lisp known as Emacs Lisp or just elisp

-Every part of Emacs can be inspected, evaluated or modified because the editor is approximately 95 percent elisp and 5 percent C code

-"It’s also a practical way to learn a radical paradigm: that
code and data are interchangeable and malleable; that the
language, owing to its simple syntax, is trivially extensible
with macros."

-What makes elisp fantastic is that source code and data structures are intrinstically the same, the source code written is almost identical to how the code is manipulate as a data structures by lisp.
"the distinction between the questions “What is data?” and “What is code?” are nil."

-The data-as-code paradigm allows you to alter code without actually modifying it, this gives the ability to hook Emacs behavior without rewritting large amounts of code

-Emacs has a built-in elisp introduction

#EMACS AS AN OPERATING SYSTEM
------------------------------
-Emacs has so much inside it

-"...Emacs comes with a built-in screensaver with
M-x zone; a text adventure game, M-x dunnet; a M-x tetris
clone; a full-blown client-server model; a lunar phases calcu-
lator; a psychotherapist in M-x doctor; several email clients;
an artist mode for drawing ASCII art; an Emacs-based X Win-
dow manager called EXWM; and, of course, an EPUB reader,
nov, that can display this very book."

-When you run Emacs you're actually running a small C core reponsible for low-level interactions with youre operating system for things like drawing to the screen and file handling

-The cornerstore of Emacs is the elisp interpreter, without it there is no Emacs

-Emacs elisp interpreter is creaky and old, and one of the major issues is speed and asynchrony

-When writing elisp code you're interactering with all of Emacs since every variable and every function call is carried out by the same interpreter

-Emacs is one giant mutable state, you change live variables and re-define live functions, query Emacs for its state anytime , ...

-Emacs never crahses - not really, anyway. Emacs has an uptime counter (M-x emacs-uptime) - multi-months uptimes are not uncommon

-When you ask Emacs a question , you're querying its state. Because of this Emacs has an excellent elisp debugger and unlimited access to every facet of Emac's own interpreter and state - so it has excellent code completion too. Any elisp expression you encounter

#EXTENSIBILITY
--------------
-Emacs is highly extensible, here are some:
       *Emacspeak: A speech interface for the blind
       *Emacs's TRAMP: Remote file editing
       *Shell access: Emacs has a built-in ANSI-capable Terminal emulator, an Emacs wrapper around shells like bash, and a full-blown shell called Eshell written entirely in elisp
       *ORG Mode: A to-do, agenda, project planner, literate programming, note-taking (and more!) application. It is widely considered the best text-based organizer ever - a feat only surpassed by the fact that people switch to Emacs just to use it
       *Symbolic Calculator: Reverse-Polish Notation calculator capable of symbolic algebra, arbirary precision computation, custom functions, matrix and unit-based mathematics, and much more.
       *Music Player: The Emacs Multimedia System (EMMS) is an interactive media browser and music player.
       *And much more Official or unofficial support for almost every programming environment; built-in man page and info reader; a very sophisticated directory and file manager; seamless support for almost every major version control system; and thousands of other features, large or small.

#IMPORTANT CONVENTIONS
----------------------
*The Buffer:
     Most text editors are file-based, they display text from files and write to files.
     In Emacs are files are buffers but not all buffers are files. If you want to temporarily store some text you just create and name a new buffer, Emacs will not be asking you for a filename only if you want to store you text in disk
     Emacs buffers are more than just a place to write text in , it is a I/O device to talk to another process such as a shell like bash or even Python
     Almost all of Emacs commands act on buffers, the buffer is not an opaque internal data structure , it is the data structure itself

*The Window and the Frame:
     A window in Emacs is titled portion of a frame, a frame is what nowadays called (window) by modern window managers, so it's the other way around.
     You can create as many frames as you like, and each frame can be splited and titled freely.

*Modeline, Echo Area, and Minibuffer:
    Emacs uses the modeline to communicate facts about Emacs and buffer you are in. The modeline looks like this:
    -UUU:**--F3 *scratch* All L4 (Lisp Interaction) --
    What you should care about to begin with are the (name) and (modes). In this instance, the buffer is name *scratch* and the major mode is (List Interaction). Most editors have a similar element known as the (status bar). And even more information can displayed here something like battery and source control branch ...
    The minibuffer is directly below the modeline and it is used to display errors and general information. The minibuffer is almost like a normal buffer you can use most of edition commands and if necessary the minibuffer will expand to multiple lines. It is how you communicate with Emacs.

*The Point and Mark:
     Point is what now commonly known as the (caret) or (cursor). Emacs documentation is inconsistent using the terms point and cursor. Nevertheless, the point is your current position in a buffer. Each buffers has its own separate point indepedent of all other buffers.
     Since several buffers can coexist simultaneously, we denote the (current buffer) is whichever buffer which has the point, in other words the buffer you're currently editing. One and only one buffer can be the (current buffer) at any time
     Point is part of a duo called the (Point and Mark) which are boundary of a text region nowadays called (Selection) or (Highlight), but also the Mark serves as a beacon which you can return to some time later. Typically the mark is invisible

*Killing, Yanking and CUA:
    Killing is cutting, Yanking is pasting, and Copying is known as (saving to the kill ring) or just (copy). The reasons of these namings are historical, most of the keys and terminology stem from IBM's Common User Access (CUA) and Apple. But the CUA was introduced in 1987, many years after Emacs had settled on its own terminology and standards.

*.emacs.d, init.el, and .eamcs:
    In pastime Emacs users shared little snippests of code or customizations that make their lives easier. Historically these settings were kept in file called .emacs, but most keep there customization in ~/.emacs.d/init.el. Now Emacs writes several files all of which are contained in the .emacs.d directory so as not to clutter your filesystem.
     Emacs 27 and later now supports the XDG convention of storing settings in ~/.config/emacs/init.el in Linux systems supporting this
     To make Emacs run what's in your configuration file, the easiest way is just close and open it again
     Emacs will not save changes for you, but this can be done through the (Customize interface), it's your responsibility to save changes you want to keep in your init.el

*Major Modes and Minor Modes:
     Major modes in Emacs control how buffers behave