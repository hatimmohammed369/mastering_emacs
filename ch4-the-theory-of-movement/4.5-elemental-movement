CONTENTS:
# NAVIGATION KEYS
# SCREEN, LOGICAL AND VISUAL LINES
# MOVING BY WORD
# MOVEMENT ASYMMETRY


==================
# NAVIGATION KEYS
==================
The usual nagivation keys (up, down, page up, page down, ...) all work normally  Emacs

* NOTICE
---------
The page up/down keys scroll up/down a screenful of text, retaining 2 lines of text for context. The remaining lines count can be adjusted by typing:
M-x customize-option RET next-screen-context-lines

- Terminals and shells that use the (GNU readline library) already use Emacs's nagivation keys commands


===================================
# SCREEN, LOGICAL AND VISUAL LINES
===================================
Visual/Screen line: A visual/screen line is what you see. If you have a very long line wrapped into three lines then you have three visual/screen lines

Logical line: The opposite of visual/screen lines. Logical lines are governed by the contents of the buffer and nothing else

Historically, the commands C-n and C-p acted on (logical lines) and thus you can't use them to move by visual lines. But today, in the latest versions of Emacs, C-n and C-p move by (visual lines). You can revert back to old behavior with (M-x customize-option RET line-move-visual)

* Mode visual-line-mode
------------------------
Enable in current buffer only
Better line wrapping, C-p and C-n behave as if (line-mode-visual) is enable, and C-a and C-e and C-k all now act on (visual lines) instead of (logical lines). Also there's global-visual-line-mode for all buffers

- You toggle off wrapped by (M-x toggle-truncate-lines)


=====================================
# DISPLAYING LINE AND COLUMN NUMBERS
=====================================
You can customize the behavior of line numbers with (M-x customize-option RET global-display-line-numbers-mode). There's absolute and relative numbering, displaying column numbers, ....


=================
# MOVING BY WORD
=================
You can also use the usual C-<left> (M-f) and C-<right> (M-b) in Emacs.
What constitute a word in Emacs is dependent on the major mode you are using in your current buffer. Every character - printable and Unicode code points - are given a meaning by the mode author, directly or indirectly, in a register that maps the characters to a particular syntactic meaning. This registery is called a (syntax table). The (syntax table) decides what makes up a word (or symbol, comment, ...).
Every editor has an equivalent to Emacs's syntax table, but what sets Emacs apart is that you can inspect and change the syntax table. You can view your current buffer syntax table with (C-h s).  In it you will see a human read-
able version of the characters and their assigned
syntax class.


=====================
# MOVEMENT ASYMMETRY
=====================
- Movement is asymmetric, thus for instance M-f followed by M-b may not necessarily take you back to where you started. Emacs will generally ignore (non-word characters) immediately following the point in the direction you are travelling. The reason for this behavior is simple: if Emacs didnâ€™t do this, then every non-word character the word commands would encounter, in both text and code, would count as a word of its own and end the movement command.


