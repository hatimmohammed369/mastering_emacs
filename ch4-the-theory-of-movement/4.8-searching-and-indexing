CONTENTS:
# ISEARCH : INCREAMENTAL SEARCH


================================
# ISEARCH : INCREAMENTAL SEARCH
================================
Emacs's increamental search. Use C-s to search forward or C-r to search backwards, also you can change search direction using the same keys respectively. Pressing C-s or C-r again and again will find next match in the respective direction. Hitting Enter selects the current match.
You can customize-option isearch-allow-scroll and isearch-allow-motion so you can move while search because by default motion terminates the search

* KEY BINDINGS SUMMARY
-----------------------
- C-s : Begins an increamental search
- C-r : Begins a backward increamental search
- C-M-s : Begins a regexp increamental search
- C-M-r : Begins a regexp backward increamental search
- RET : Pick the selected match and also it drops a mart at your orginal location so you can return to your forwer location with C-u C-<SPC>
- C-g : Exit isearch
- M-<, M-> : Jump to first or last match (Emacs 28)
- C-v, M-v : Jump to next or previous mach not current visible (Emacs 28)

* CASE FOLDING
---------------
By default, isearches are not case sensitive. However, when you use one or more uppercase letters in your search, Emacs will automatically switch to a case-sensitive search. It's called (case folding). You can customize that with (M-x customize-option RET case-fold-search RET)

* ACCESSING SEARCH HISTORY
--------------------------
Formerly isearch history was called the (search ring)
- M-n : Move to next item in search history
- M-p : Move to previous item in search history
- C-M-i : "TAB"-complete search string against previous search ring, in other words it tries to complete from strings available in your search ring
- C-s C-s : Begins Isearch against last search string
- C-r C-r : Begins backward Isearch against last search string

You can quickly search text near the Point with the following commnands:
- C-w     : Add word at point to search string
- C-M-y   : Add character at point to search string
- M-s C-e : Add rest of line at point to search string
- C-y     : Yank ("paste") from clipboard to search string

You can control how Isearch behaves using its toggles:
- M-s c : Toggles case-sensitivity
- M-s r : Toggles regular-expression mode
- M-s w : Toggles word mode
- M-s _ : Toggles symbol mode
- M-s ' : Toggles character folding
- M-s <SPC> : Toggles lax whitespace matching
Each toggle command only affects the current Isearch and will not persist

- Toggling regular-expression is akin to C-M-r or C-M-s

- Toggling word and symbol modes alters Isearch so word and symbol delimiters like . and - freely match other delimiters. If you have this text:
this-is-a-hyphenated-string
searching for (hyphenated string) will not yield a match, but if you run C-s with M-s w, it will.

- Word search is also useful in programming languages where you want to search for two adjacent string separated by an (possibly) unknown word-delimiter, like: mystruct->foo = 10;
You can run C-s with M-s w on mystruct foo

- You can call the key bindings (M-s w) and (M-s _) globally

Also there are these two global key bindings:
- M-s .   : Isearch forward for symbol at point
- M-s M-. : Isearch forward for thing at point (Emacs 28)

M-s . is only
available as a global key binding. It begins a forward Isearch
for the symbol at point. The definition of a symbol is mode-
dependent, but Emacs is usually smart enough to deduce
where the symbol begins and ends.

In a similar vein is M-s M-. which finds the thing at point.
What that thing is, is contextual, and is controlled by the cus-
tomizable option isearch-forward-thing-at-point. By de-
fault it’ll check for a region selection; an url; a symbol; or
an s-expression, in that order. That makes it a convenient
one-size-fits-all tool to grab the thing you’re most likely in-
terested in.
If you want to Isearch with an active region, then it stands
to reason you’d probably want to use that as an isearch query
also. The same holds for the other choices.
Thing at Point
In Emacs, the thing at point is an extensible
system for extracting “interesting” text around
point. It’s a system package authors can tap into
to extend, and it’s used in many parts of Emacs.